#!/usr/bin/env python
# -%- coding: utf-8 -%-
# Author: Marcin Szamotulski
# Python Versions: 2.7, 3.4
# License: VIM LICENSE.
#          NO WARRANTY, EXPRESS OR IMPLIED> USE AT-YOUR-OWN-RISK.

import os
import sys
import re
import subprocess
import argparse
import locale
import psutil
import heapq
import tempfile
import time
from copy import copy
from collections import defaultdict
from operator import attrgetter
PY3 = sys.version_info[0] == 3
if not PY3:
    input = raw_input
encoding = locale.getpreferredencoding()
if PY3:
    from functools import reduce
    unicode = str
else:
    bytes = str

EDITOR = u'gvim' if \
    re.search(
        r'gvim(\.exe)?$',
        os.environ.get('EDITOR', 'vim')) \
    else 'vim'
CURDIR = os.path.normpath(os.path.abspath(os.curdir))


def format_path(path):
    return u"%s%s" % (os.curdir, path[len(CURDIR):]) \
        if path.startswith(CURDIR) \
        else path


class StdOut(object):
    """
    Support for Python2.6
    """

    def __getattr__(self, name):

        return getattr(sys.__stdout__, name)


    def write(self, s):
        if isinstance(s, unicode):
            s = s.encode(self.encoding)
        if isinstance(s, bytes):
            s = s.decode(self.encoding)
        sys.__stdout__.write(s)


sys.stdout = StdOut()


class SwapDecodeError(Exception):
    pass


class File(object):
    """
    Class holding a file corresponding to a Swap instance.
    """

    def __init__(self, swap):
        self.path = swap.file_name
        self.swap = swap

    @property
    def content(self):
        if hasattr(self, '_content'):
            return self._content
        try:
            if PY3:
                mode = 'br'
            else:
                mode = 'r'
            with open(self.path, mode) as fo:
                cont = fo.read()
        except Exception:
            cont = None
        self._content = cont
        return cont


class Swap(object):
    """
    Class describing and introducing method related to a swap file.
    """

    def __init__(self, swap):

        dirp = os.path.dirname(swap)
        base = os.path.basename(swap)
        if PY3:
            self._swap = swap
            self.swap = swap
        else:
            self._swap = swap
            self.swap = swap.decode(encoding)
        file_name, self.swapext = os.path.splitext(base)
        try:
            self.mtime = os.path.getmtime(self.swap)
        except os.error:
            self.mtime = None
        if sys.platform == 'linux2' and not PY3 or \
                sys.platform == 'linux' and PY3:
            file_name = file_name[1:]
        else:
            # TODO: shortname option on MS-DOS machines
            # :help :swapname
            pass
        self.file_name = os.path.join(dirp, file_name)
        self.file = File(self)

    def __lt__(self, other):

        if self.file_name != other.file_name:
            return self.file_name < other.file_name
        if self.mtime is not None and other.mtime is not None:
            # the newest first
            return self.mtime > other.mtime
        elif self.mtime is not None:
            return False
        else:
            return True

    __ne__ = lambda s, o: s != o
    __gt__ = lambda s, o: not s < o and s != o

    def __eq__(self, other):

        return self.swap == other.swap

    def __str__(self):
        return self._swap

    def __unicode__(self):
        return self.swap

    if PY3:
        __str__ = __unicode__
        del __unicode__

    def check(self):
        """
        check if swap file is used by a process
        """

        for process in psutil.process_iter():
            try:
                files = process.get_open_files()
            except psutil.AccessDenied:
                files = []
            except psutil.error.NoSuchProcess:
                files = []
            files = map(attrgetter('path'), files)
            if not PY3:
                files = map(lambda p: p.decode(encoding), files)
            if self.swap in files:
                return process

    def read_swap(self):
        """
        Read a swap file into self._content.  Use NamedTemporaryFile.
        """

        tfile = tempfile.NamedTemporaryFile()
        name = tfile.name
        cmd = u'{0} -X -u NONE -r -c"w! {1}|q" "{2}"'.format(EDITOR, name, self.swap)
        exit = subprocess.call(cmd, shell=True)
        if exit != os.EX_OK:
            e = SwapDecodeError(swap.swap)
            e.exit = exit
            raise e
        self._content = tfile.read()
        tfile.close()

    def remove(self):
        """
        Delete the swap file.
        """
        if os.path.exists(self.swap):
            os.remove(self.swap)
            self.removed = True

    @property
    def content(self):
        """
        Return content of the swap file.
        """

        if hasattr(self, '_content'):
            return self._content
        else:
            self.read_swap()
            return self._content

    @property
    def is_modified(self):
        """
        Check if swap file differs from self.file.
        """

        return self.content != self.file.content

    def format(self):

        sname = format_path(self.swap)
        if self.mtime:
            return u'{0} ({1})'.format(
                sname,
                time.strftime('%x %X', time.localtime(self.mtime))
            )
        else:
            return sname


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument(
        dest='directories',
        nargs='*',
        default=(os.curdir,),
        help='directory where to look for swap (by default current directory)',
    )
    parser.add_argument(
        '-r', '-R', '--recursive',
        dest='recursive',
        action='store_true',
        help='search directory recursively'
    )
    parser.add_argument(
        '-f', '--find',
        dest='find',
        action='store_true',
        help='only find swap files, it impiles -r',
    )
    parser.add_argument(
        '-a', '--ask',
        dest='ask',
        action='store_true',
        help='ask before deleting swap files which do not '
             'differ from the associated file.',
    )
    args = parser.parse_args(sys.argv[1:])
    if not hasattr(args, 'directories'):
        setattr(args, 'directories', [os.path.abspath(os.curdir)])

    if args.find:
        args.recursive = True

    swaps = defaultdict(list)
    _swaps = []

    # Note: this will skip .swf files as these are usually Flash content
    # TODO: print some warning when a *.swf file is found
    swap_re = re.compile('\.sw[a-eg-z]+$')
    for dir_ in args.directories:
        if args.recursive:
            os.chdir(os.path.abspath(dir_))
            for dirp, dirs, fns in os.walk(os.curdir):
                for f in fns:
                    if swap_re.search(f):
                        swap = Swap(os.path.abspath(os.path.join(dirp, f)))
                        heapq.heappush(swaps[swap.file_name], swap)

        else:
            os.chdir(os.path.abspath(dir_))
            _swaps = filter(lambda f: swap_re.search(f), os.listdir(os.curdir))
            if not PY3:
                _swaps = map(lambda s: s.decode(encoding), _swaps)
            for sp in _swaps:
                swap = Swap(sp)
                heapq.heappush(swaps[swap.file_name], swap)

    del _swaps
    os.chdir(CURDIR)

    if swaps:
        nr_swaps = reduce(lambda x, y: x + y, map(len, swaps.values()))
    else:
        nr_swaps = 0

    if nr_swaps == 0:
        print(u'No swap files found.')
        sys.exit(os.EX_OK)
    elif nr_swaps == 1:
        print(u'Found: {0} swap file (mtime):'.format(unicode(nr_swaps)))
    else:
        print(u'Found: {0} swap files (mtime):'.format(unicode(nr_swaps)))
    if not PY3:
        _CURDIR = CURDIR.decode(encoding)
    else:
        _CURDIR = CURDIR
    for p, sws in swaps.items():
        sws = copy(sws)
        while sws:
            swap = heapq.heappop(sws)
            print(u'  {0}'.format(swap.format()))
    if args.find:
        sys.exit(os.EX_OK)

    # main loop
    for file_name in swaps.keys():
        sws = swaps[file_name]
        len_sws = len(sws)
        if len_sws > 1:
            print(u"Multiple swap files for \"{0}\" (exit {1} with :cq to keep the "
                  u"remaining ones)".format(format_path(swap.file_name), EDITOR))
        delete = False
        while sws:
            # pop the youngest swap files first
            swap = heapq.heappop(sws)
            process = swap.check()
            if process:
                if process.terminal:
                    terminal = u" on %s" % process.terminal.decode('utf-8')
                else:
                    terminal = u""
                print(u'The "{0}" swap file is used by process {1} ({2}){3}.  '
                      u'Skipping.'.format(swap, unicode(process.pid),
                                          process.name.decode(encoding),
                                          terminal))
                continue

            try:
                swap.read_swap()
            except SwapDecodeError as e:
                print(u'Skipping {0}: {1} exited with error code {2}'.format(swap, EDITOR, unicode(e.exit)))
                continue

            if not swap.is_modified:
                if args.ask:
                    inp = input('The swap file "{0}" and "{1}" do not differ.'
                                ' Do you want to delete it?  [Y/N]\n'
                                .format(os.path.basename(swap._swap),
                                        os.path.basename(swap.file_name))
                                )
                    inp = inp.lower()
                    if inp in ('y', 'yes'):
                        swap.remove()
                else:
                    print(u'Deleting "{0}" swap file (matching the content)'
                          .format(swap))
                    swap.remove()
            else:
                if len_sws > 1:
                    # b:swapname is set for :FinishRecovery
                    cmd = u'{0} -X +"call recover#DiffRecoveredFile()|let b:swapname=\'{1}\'" -r "{1}"'. \
                        format(EDITOR, swap)
                else:
                    cmd = u'{0} -X "{1}"'.format(EDITOR, swap.file_name)
                print(u'\n{0}'.format(cmd))
                vim = subprocess.Popen(cmd, shell=True)
                if vim.wait() != 0:
                    break
                elif len_sws > 1 and sws:
                    inp = input('There are more swap files for "{0}", do'
                                ' you want to delete them all? [Y/N]'.
                                format(format_path(swap.file_name)))
                    if inp.lower() in ('y', 'yes'):
                        swap.remove()
                        delete = True
                        break
        if delete and sws:
            print(u'Deleting swap files:')
            for swap in sws:
                print(u'\t{0}'.format(format_path(swap.swap)))
                swap.remove()

    sys.exit(os.EX_OK)
